!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
BEGIN	scan.c	125;"	d	file:
COD_DEBUG_ADDR	cod.c	568;"	d	file:
COD_DEBUG_CMD	cod.c	569;"	d	file:
COD_DEBUG_EXTRA	cod.c	571;"	d	file:
COD_DEBUG_MSG	cod.c	570;"	d	file:
COD_FIRST_LST_LINE	cod.h	26;"	d
COD_LAST_LST_LINE	cod.h	28;"	d
COD_NORMAL_LST_LINE	cod.h	27;"	d
COD_SYM_EXTRA	cod.c	325;"	d	file:
COD_SYM_TYPE	cod.c	323;"	d	file:
COD_SYM_VALUE	cod.c	324;"	d	file:
DEFINE	parse.c	/^     DEFINE = 264,$/;"	e	enum:yytokentype	file:
DEFINE	parse.c	221;"	d	file:
DEFINE	parse.h	/^     DEFINE = 264,$/;"	e	enum:yytokentype
DEFINE	parse.h	63;"	d
ECHO	scan.c	660;"	d	file:
ELSE	parse.c	/^     ELSE = 266,$/;"	e	enum:yytokentype	file:
ELSE	parse.c	223;"	d	file:
ELSE	parse.h	/^     ELSE = 266,$/;"	e	enum:yytokentype
ELSE	parse.h	65;"	d
EOB_ACT_CONTINUE_SCAN	scan.c	168;"	d	file:
EOB_ACT_END_OF_FILE	scan.c	169;"	d	file:
EOB_ACT_LAST_MATCH	scan.c	170;"	d	file:
ERROR	parse.c	/^     ERROR = 262,$/;"	e	enum:yytokentype	file:
ERROR	parse.c	219;"	d	file:
ERROR	parse.h	/^     ERROR = 262,$/;"	e	enum:yytokentype
ERROR	parse.h	61;"	d
FI	parse.c	/^     FI = 267$/;"	e	enum:yytokentype	file:
FI	parse.c	224;"	d	file:
FI	parse.h	/^     FI = 267$/;"	e	enum:yytokentype
FI	parse.h	66;"	d
FILES_PER_BLOCK	cod.c	193;"	d	file:
FLEXINT_H	scan.c	29;"	d	file:
FLEX_BETA	scan.c	13;"	d	file:
FLEX_SCANNER	scan.c	8;"	d	file:
GET_OPTIONS	gplink.c	423;"	d	file:
GPLINK_H	gplink.h	23;"	d
GPLINK_VERSION_STRING	gplink.h	25;"	d
HEAD	script.c	29;"	d	file:
IFDEF	parse.c	/^     IFDEF = 265,$/;"	e	enum:yytokentype	file:
IFDEF	parse.c	222;"	d	file:
IFDEF	parse.h	/^     IFDEF = 265,$/;"	e	enum:yytokentype
IFDEF	parse.h	64;"	d
INITIAL	scan.c	568;"	d	file:
INT16_MAX	scan.c	71;"	d	file:
INT16_MIN	scan.c	62;"	d	file:
INT32_MAX	scan.c	74;"	d	file:
INT32_MIN	scan.c	65;"	d	file:
INT8_MAX	scan.c	68;"	d	file:
INT8_MIN	scan.c	59;"	d	file:
IS_PIC16	lst.c	130;"	d	file:
LEXEOF	parse.c	/^     LEXEOF = 0,$/;"	e	enum:yytokentype	file:
LEXEOF	parse.c	214;"	d	file:
LEXEOF	parse.h	/^     LEXEOF = 0,$/;"	e	enum:yytokentype
LEXEOF	parse.h	56;"	d
LIBPATH	parse.c	/^     LIBPATH = 259,$/;"	e	enum:yytokentype	file:
LIBPATH	parse.c	216;"	d	file:
LIBPATH	parse.h	/^     LIBPATH = 259,$/;"	e	enum:yytokentype
LIBPATH	parse.h	58;"	d
LINESIZ	lst.c	232;"	d	file:
LKRPATH	parse.c	/^     LKRPATH = 260,$/;"	e	enum:yytokentype	file:
LKRPATH	parse.c	217;"	d	file:
LKRPATH	parse.h	/^     LKRPATH = 260,$/;"	e	enum:yytokentype
LKRPATH	parse.h	59;"	d
MAP_H	map.h	23;"	d
MAX_PATHS	gplink.h	27;"	d
MAX_STRING_LEN	cod.c	572;"	d	file:
MAX_SYM_LEN	cod.c	326;"	d	file:
MEM_IS_USED	lst.c	78;"	d	file:
NELEM	script.c	32;"	d	file:
NUMBER	parse.c	/^     NUMBER = 263,$/;"	e	enum:yytokentype	file:
NUMBER	parse.c	220;"	d	file:
NUMBER	parse.h	/^     NUMBER = 263,$/;"	e	enum:yytokentype
NUMBER	parse.h	62;"	d
PATH	parse.c	/^     PATH = 261,$/;"	e	enum:yytokentype	file:
PATH	parse.c	218;"	d	file:
PATH	parse.h	/^     PATH = 261,$/;"	e	enum:yytokentype
PATH	parse.h	60;"	d
REJECT	scan.c	524;"	d	file:
SCRIPT_H	script.h	23;"	d
SECTION_CODE	map.c	34;"	d	file:
SECTION_IDATA	map.c	35;"	d	file:
SECTION_ROMDATA	map.c	33;"	d	file:
SECTION_UDATA	map.c	36;"	d	file:
SECTION_UNKNOWN	map.c	32;"	d	file:
SYMBOL	parse.c	/^     SYMBOL = 258,$/;"	e	enum:yytokentype	file:
SYMBOL	parse.c	215;"	d	file:
SYMBOL	parse.h	/^     SYMBOL = 258,$/;"	e	enum:yytokentype
SYMBOL	parse.h	57;"	d
TAIL	script.c	30;"	d	file:
UINT16_MAX	scan.c	80;"	d	file:
UINT32_MAX	scan.c	83;"	d	file:
UINT8_MAX	scan.c	77;"	d	file:
YYABORT	parse.c	670;"	d	file:
YYACCEPT	parse.c	669;"	d	file:
YYBACKUP	parse.c	682;"	d	file:
YYBISON	parse.c	46;"	d	file:
YYBISON_VERSION	parse.c	49;"	d	file:
YYCOPY	parse.c	436;"	d	file:
YYCOPY	parse.c	439;"	d	file:
YYDEBUG	parse.c	177;"	d	file:
YYDPRINTF	parse.c	762;"	d	file:
YYDPRINTF	parse.c	911;"	d	file:
YYEMPTY	parse.c	666;"	d	file:
YYEOF	parse.c	667;"	d	file:
YYERRCODE	parse.c	701;"	d	file:
YYERROR	parse.c	671;"	d	file:
YYERROR_VERBOSE	parse.c	182;"	d	file:
YYERROR_VERBOSE	parse.c	183;"	d	file:
YYERROR_VERBOSE	parse.c	185;"	d	file:
YYFAIL	parse.c	678;"	d	file:
YYFINAL	parse.c	469;"	d	file:
YYFPRINTF	parse.c	759;"	d	file:
YYFREE	parse.c	402;"	d	file:
YYID	parse.c	/^YYID (yyi)$/;"	f	file:
YYID	parse.c	326;"	d	file:
YYINITDEPTH	parse.c	920;"	d	file:
YYLAST	parse.c	471;"	d	file:
YYLEX	parse.c	749;"	d	file:
YYLEX	parse.c	751;"	d	file:
YYLLOC_DEFAULT	parse.c	710;"	d	file:
YYLSP_NEEDED	parse.c	64;"	d	file:
YYMALLOC	parse.c	395;"	d	file:
YYMAXDEPTH	parse.c	931;"	d	file:
YYMAXUTOK	parse.c	484;"	d	file:
YYNNTS	parse.c	476;"	d	file:
YYNRULES	parse.c	478;"	d	file:
YYNSTATES	parse.c	480;"	d	file:
YYNTOKENS	parse.c	474;"	d	file:
YYPACT_NINF	parse.c	613;"	d	file:
YYPOPSTACK	parse.c	1271;"	d	file:
YYPULL	parse.c	61;"	d	file:
YYPURE	parse.c	55;"	d	file:
YYPUSH	parse.c	58;"	d	file:
YYRECOVERING	parse.c	680;"	d	file:
YYRHSLOC	parse.c	708;"	d	file:
YYSIZE_MAXIMUM	parse.c	303;"	d	file:
YYSIZE_T	parse.c	291;"	d	file:
YYSIZE_T	parse.c	293;"	d	file:
YYSIZE_T	parse.c	297;"	d	file:
YYSIZE_T	parse.c	299;"	d	file:
YYSKELETON_NAME	parse.c	52;"	d	file:
YYSTACK_ALLOC	parse.c	349;"	d	file:
YYSTACK_ALLOC	parse.c	353;"	d	file:
YYSTACK_ALLOC	parse.c	358;"	d	file:
YYSTACK_ALLOC	parse.c	381;"	d	file:
YYSTACK_ALLOC_MAXIMUM	parse.c	378;"	d	file:
YYSTACK_ALLOC_MAXIMUM	parse.c	384;"	d	file:
YYSTACK_BYTES	parse.c	428;"	d	file:
YYSTACK_FREE	parse.c	372;"	d	file:
YYSTACK_FREE	parse.c	382;"	d	file:
YYSTACK_GAP_MAXIMUM	parse.c	424;"	d	file:
YYSTACK_RELOCATE	parse.c	1353;"	d	file:
YYSTACK_RELOCATE	parse.c	455;"	d	file:
YYSTATE	scan.c	132;"	d	file:
YYSTYPE	parse.c	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	parse.c	/^} YYSTYPE;$/;"	t	file:
YYSTYPE	parse.h	/^typedef union YYSTYPE$/;"	u
YYSTYPE	parse.h	/^} YYSTYPE;$/;"	t
YYSTYPE_IS_DECLARED	parse.c	248;"	d	file:
YYSTYPE_IS_DECLARED	parse.h	90;"	d
YYSTYPE_IS_TRIVIAL	parse.c	246;"	d	file:
YYSTYPE_IS_TRIVIAL	parse.h	88;"	d
YYTABLES_NAME	scan.c	1968;"	d	file:
YYTABLE_NINF	parse.c	634;"	d	file:
YYTERROR	parse.c	700;"	d	file:
YYTOKENTYPE	parse.c	196;"	d	file:
YYTOKENTYPE	parse.h	38;"	d
YYTOKEN_TABLE	parse.c	190;"	d	file:
YYTRANSLATE	parse.c	486;"	d	file:
YYUNDEFTOK	parse.c	483;"	d	file:
YYUSE	parse.c	319;"	d	file:
YYUSE	parse.c	321;"	d	file:
YY_	parse.c	309;"	d	file:
YY_	parse.c	313;"	d	file:
YY_AT_BOL	scan.c	339;"	d	file:
YY_BREAK	scan.c	739;"	d	file:
YY_BUFFER_EOF_PENDING	scan.c	255;"	d	file:
YY_BUFFER_NEW	scan.c	243;"	d	file:
YY_BUFFER_NORMAL	scan.c	244;"	d	file:
YY_BUFFER_STATE	scan.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	file:
YY_BUF_SIZE	scan.c	149;"	d	file:
YY_BUF_SIZE	scan.c	151;"	d	file:
YY_CHAR	scan.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	scan.c	271;"	d	file:
YY_CURRENT_BUFFER_LVALUE	scan.c	278;"	d	file:
YY_DECL	scan.c	727;"	d	file:
YY_DECL_IS_OURS	scan.c	723;"	d	file:
YY_DO_BEFORE_ACTION	scan.c	367;"	d	file:
YY_END_OF_BUFFER	scan.c	375;"	d	file:
YY_END_OF_BUFFER_CHAR	scan.c	140;"	d	file:
YY_EXIT_FAILURE	scan.c	1766;"	d	file:
YY_EXTRA_TYPE	scan.c	579;"	d	file:
YY_FATAL_ERROR	scan.c	714;"	d	file:
YY_FLEX_MAJOR_VERSION	scan.c	9;"	d	file:
YY_FLEX_MINOR_VERSION	scan.c	10;"	d	file:
YY_FLEX_SUBMINOR_VERSION	scan.c	11;"	d	file:
YY_FLUSH_BUFFER	scan.c	307;"	d	file:
YY_INPUT	scan.c	667;"	d	file:
YY_INT_ALIGNED	scan.c	4;"	d	file:
YY_LESS_LINENO	scan.c	172;"	d	file:
YY_LOCATION_PRINT	parse.c	736;"	d	file:
YY_LOCATION_PRINT	parse.c	741;"	d	file:
YY_MORE_ADJ	scan.c	526;"	d	file:
YY_NEW_FILE	scan.c	138;"	d	file:
YY_NO_UNPUT	scan.c	562;"	d	file:
YY_NULL	scan.c	112;"	d	file:
YY_NUM_RULES	scan.c	374;"	d	file:
YY_READ_BUF_SIZE	scan.c	649;"	d	file:
YY_READ_BUF_SIZE	scan.c	651;"	d	file:
YY_REDUCE_PRINT	parse.c	901;"	d	file:
YY_REDUCE_PRINT	parse.c	914;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	scan.c	527;"	d	file:
YY_RULE_SETUP	scan.c	742;"	d	file:
YY_SC_TO_UI	scan.c	119;"	d	file:
YY_SKIP_YYWRAP	scan.c	344;"	d	file:
YY_STACK_PRINT	parse.c	863;"	d	file:
YY_STACK_PRINT	parse.c	913;"	d	file:
YY_START	scan.c	131;"	d	file:
YY_START_STACK_INCR	scan.c	709;"	d	file:
YY_STATE_BUF_SIZE	scan.c	157;"	d	file:
YY_STATE_EOF	scan.c	135;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	scan.c	196;"	d	file:
YY_SYMBOL_PRINT	parse.c	768;"	d	file:
YY_SYMBOL_PRINT	parse.c	912;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	scan.c	160;"	d	file:
YY_TYPEDEF_YY_SIZE_T	scan.c	191;"	d	file:
YY_USER_ACTION	scan.c	734;"	d	file:
YY_USE_CONST	scan.c	100;"	d	file:
YY_USE_CONST	scan.c	93;"	d	file:
_STDLIB_H	parse.c	363;"	d	file:
_STDLIB_H	parse.c	391;"	d	file:
__COD_H__	cod.h	23;"	d
__LST_H__	lst.h	23;"	d
__SCAN_H__	scan.h	23;"	d
__STDC_LIMIT_MACROS	scan.c	39;"	d	file:
_section_value	map.c	/^_section_value(gp_section_type *section)$/;"	f	file:
_write_program_memory	map.c	/^_write_program_memory(void)$/;"	f	file:
_write_sections	map.c	/^_write_sections(void)$/;"	f	file:
_write_symbols	map.c	/^_write_symbols(void)$/;"	f	file:
add_linker_symbol	gplink.c	/^add_linker_symbol(char *name)$/;"	f	file:
add_path	script.c	/^add_path(struct pnode *parms)$/;"	f
add_script_macro	script.c	/^void add_script_macro(const char *name, long value)$/;"	f
alloca	parse.c	356;"	d	file:
archive	gplink.h	/^    struct symbol_table *archive;    \/* archive symbol index *\/$/;"	m	struct:gplink_state::<anonymous>
archive	gplink.h	/^  gp_archive_type     *archive;$/;"	m	struct:archivelist
archive_append	gplink.c	/^void archive_append(gp_archive_type *file, char *name)$/;"	f
archivelist	gplink.h	/^struct archivelist {$/;"	s
archives	gplink.h	/^  struct archivelist    *archives;$/;"	m	struct:gplink_state
assign_file_id	cod.c	/^assign_file_id(void)$/;"	f	file:
bad_char	scan.c	/^static void bad_char(char *character)$/;"	f	file:
basefilename	gplink.h	/^    basefilename[BUFSIZ],          \/* basename for generating hex,list,symbol filenames *\/$/;"	m	struct:gplink_state
before_exit_failure	gplink.c	/^void before_exit_failure()$/;"	f
binop	script.h	/^    } binop;$/;"	m	union:pnode::<anonymous>
binop	script.h	/^  enum pnode_tag { constant, symbol, string, list, binop, unop } tag;$/;"	e	enum:pnode::pnode_tag
blocks	cod.c	/^static int blocks = 0;$/;"	v	file:
build_tables	gplink.c	/^void build_tables(void)$/;"	f
close_file	scan.c	/^int close_file()$/;"	f
close_src	lst.c	/^close_src(void)$/;"	f	file:
cod	gplink.h	/^  } cod;$/;"	m	struct:gplink_state
cod_close_file	cod.c	/^cod_close_file(void)$/;"	f
cod_emit_opcode	cod.c	/^cod_emit_opcode(int address,int opcode)$/;"	f	file:
cod_init	cod.c	/^cod_init(void)$/;"	f
cod_lst_line	cod.c	/^cod_lst_line(int line_type)$/;"	f
cod_lst_line_number	cod.c	/^static int cod_lst_line_number = 0;$/;"	v	file:
cod_symbol_table	cod.c	/^cod_symbol_table(struct symbol_table *table)$/;"	f	file:
cod_write_code	cod.c	/^cod_write_code(void)$/;"	f	file:
cod_write_debug	cod.c	/^cod_write_debug(void)$/;"	f	file:
cod_write_symbols	cod.c	/^cod_write_symbols(struct symbol **symbol_list, int num_symbols)$/;"	f
codfile	gplink.h	/^    codfile,                       \/* Symbol output file control *\/$/;"	m	struct:gplink_state
codfilename	gplink.h	/^    codfilename[BUFSIZ],           \/* Symbol (.cod) file name *\/$/;"	m	struct:gplink_state
compare_sections	map.c	/^compare_sections(const void *a, const void *b)$/;"	f	file:
constant	script.h	/^    long constant;$/;"	m	union:pnode::<anonymous>
constant	script.h	/^  enum pnode_tag { constant, symbol, string, list, binop, unop } tag;$/;"	e	enum:pnode::pnode_tag
count_missing	gplink.c	/^int count_missing(void)$/;"	f
dead_sections	gplink.h	/^    gp_boolean dead_sections;$/;"	m	struct:gplink_state::<anonymous>
definition	gplink.h	/^    struct symbol_table *definition; \/* external symbol definition *\/$/;"	m	struct:gplink_state::<anonymous>
definition	gplink.h	/^    struct symbol_table *definition; \/* section definitions from script *\/$/;"	m	struct:gplink_state::<anonymous>
do_files	script.c	/^static int do_files(char *name, enum section_type type, struct pnode *parms)$/;"	f	file:
do_include	script.c	/^static int do_include(char *name, enum section_type type, struct pnode *parms)$/;"	f	file:
do_logsec	script.c	/^static int do_logsec(char *name, enum section_type type, struct pnode *parms)$/;"	f	file:
do_secdef	script.c	/^static int do_secdef(char *name, enum section_type type, struct pnode *parms)$/;"	f	file:
do_stack	script.c	/^static int do_stack(char *name, enum section_type type, struct pnode *parms)$/;"	f	file:
emitting	gplink.h	/^    int emitting;                    \/*   flag indicating when an opcode is emitted *\/$/;"	m	struct:gplink_state::<anonymous>
enabled	gplink.h	/^    gp_boolean enabled;              \/*   list file is enabled *\/$/;"	m	struct:gplink_state::<anonymous>
enabled	gplink.h	/^    gp_boolean enabled;              \/*   symbol file is enabled *\/$/;"	m	struct:gplink_state::<anonymous>
enforce_simple	script.c	/^static int enforce_simple(struct pnode *p)$/;"	f	file:
evaluate	script.c	/^static long evaluate(struct pnode *p)$/;"	f	file:
execute_command	script.c	/^int execute_command(char *name, struct pnode *parms)$/;"	f
expand	lst.c	/^expand(const char *buf)$/;"	f	file:
f	gplink.h	/^    FILE *f;                         \/*   List file output *\/$/;"	m	struct:gplink_state::<anonymous>
f	gplink.h	/^    FILE *f;                         \/*   Map file output *\/$/;"	m	struct:gplink_state::<anonymous>
f	gplink.h	/^    FILE *f;                         \/*   Symbol file output *\/$/;"	m	struct:gplink_state::<anonymous>
f	gplink.h	/^  FILE *f;$/;"	m	struct:list_context
f	gplink.h	/^  FILE *f;$/;"	m	struct:source_context
file_stack	map.c	/^struct file_stack {$/;"	s	file:
fill_enable	gplink.h	/^  gp_boolean fill_enable;          \/* Fill unused program memory with value *\/$/;"	m	struct:gplink_state
fill_value	gplink.h	/^  unsigned int fill_value;         \/* Value to fill program memory with *\/$/;"	m	struct:gplink_state
find_line_number	lst.c	/^find_line_number(gp_symbol_type *symbol, int line_number)$/;"	f
flex_int16_t	scan.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	scan.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	scan.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	scan.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	scan.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	scan.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	scan.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	scan.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	scan.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	scan.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	scan.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	scan.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
get_script_macro	script.c	/^long get_script_macro(const char *name)$/;"	f
gplink_add_path	gplink.c	/^void gplink_add_path(const char *path)$/;"	f
gplink_open_coff	gplink.c	/^void gplink_open_coff(const char *name)$/;"	f
gplink_state	gplink.h	/^extern struct gplink_state {$/;"	s
has_idata	gplink.h	/^  gp_boolean has_idata;            \/* Has initialized data memory *\/$/;"	m	struct:gplink_state
has_stack	gplink.h	/^  gp_boolean has_stack;            \/* Has stack directive in linker script *\/$/;"	m	struct:gplink_state
head	script.h	/^      struct pnode *head, *tail;$/;"	m	struct:pnode::<anonymous>::<anonymous>
hex_format	gplink.h	/^  enum formats hex_format;         \/* format of the output *\/$/;"	m	struct:gplink_state
hexfile	gplink.h	/^    hexfile,                       \/* Hex output file control *\/$/;"	m	struct:gplink_state
hexfilename	gplink.h	/^    hexfilename[BUFSIZ],           \/* Hex (.hex) file name *\/$/;"	m	struct:gplink_state
i	parse.c	/^  int i;$/;"	m	union:YYSTYPE	file:
i	parse.h	/^  int i;$/;"	m	union:YYSTYPE
i_memory	gplink.h	/^  MemBlock              *i_memory;   \/* Instruction memory linked list *\/$/;"	m	struct:gplink_state
ifdef	gplink.h	/^  struct ifdef *ifdef;             \/* Top of the stack of ifdef nesting *\/$/;"	m	struct:gplink_state
ifdef	gplink.h	/^struct ifdef {$/;"	s
inelse	gplink.h	/^  gp_boolean inelse;$/;"	m	struct:ifdef
init	gplink.c	/^init(void)$/;"	f
init_DirBlock	cod.c	/^init_DirBlock(DirBlockInfo *a_dir)$/;"	f	file:
istrue	gplink.h	/^  gp_boolean istrue;$/;"	m	struct:ifdef
l	parse.c	/^  long l;$/;"	m	union:YYSTYPE	file:
l	parse.h	/^  long l;$/;"	m	union:YYSTYPE
level	gplink.h	/^    int level;$/;"	m	struct:gplink_state::<anonymous>
line_number	gplink.h	/^  unsigned int line_number;$/;"	m	struct:list_context
line_number	gplink.h	/^  unsigned int line_number;$/;"	m	struct:source_context
line_section	lst.c	/^static gp_section_type *line_section;$/;"	v	file:
linker	gplink.c	/^linker(void)$/;"	f
list	script.h	/^    } list;$/;"	m	union:pnode::<anonymous>
list	script.h	/^  enum pnode_tag { constant, symbol, string, list, binop, unop } tag;$/;"	e	enum:pnode::pnode_tag
list_context	gplink.h	/^struct list_context {$/;"	s
list_enabled	lst.c	/^static gp_boolean list_enabled;$/;"	v	file:
logical	gplink.h	/^    struct symbol_table *logical;    \/* logical definitions from script *\/$/;"	m	struct:gplink_state::<anonymous>
longopts	gplink.c	/^  static struct option longopts[] =$/;"	v	file:
lst	gplink.h	/^  } lst;$/;"	m	struct:gplink_state
lst_eol	lst.c	/^static void lst_eol(void)$/;"	f	file:
lst_init	lst.c	/^lst_init(void)$/;"	f	file:
lst_line	lst.c	/^lst_line(const char *format, ...)$/;"	f	file:
lst_memory_map	lst.c	/^void lst_memory_map(MemBlock *m)$/;"	f
lst_printf	lst.c	/^static int lst_printf(const char *format, ...)$/;"	f	file:
lstfile	gplink.h	/^    lstfile,                       \/* List output file control *\/$/;"	m	struct:gplink_state
lstfilename	gplink.h	/^    lstfilename[BUFSIZ],           \/* Symbol (.lst) file name *\/$/;"	m	struct:gplink_state
main	gplink.c	/^main(int argc, char *argv[])$/;"	f
main_dir	cod.c	/^static DirBlockInfo main_dir;$/;"	v	file:
make_map	map.c	/^make_map(void)$/;"	f
map	gplink.h	/^  } map;$/;"	m	struct:gplink_state
map_line	map.c	/^map_line(const char *format, ...)$/;"	f
mapfile	gplink.h	/^    mapfile,                       \/* Map output file control *\/$/;"	m	struct:gplink_state
mapfilename	gplink.h	/^    mapfilename[BUFSIZ],           \/* List (.map) file name *\/$/;"	m	struct:gplink_state
missing	gplink.h	/^    struct symbol_table *missing;    \/* missing external symbols *\/$/;"	m	struct:gplink_state::<anonymous>
missing_source	gplink.h	/^  gp_boolean missing_source;$/;"	m	struct:list_context
mk_2op	parse.c	/^static struct pnode *mk_2op(int op, struct pnode *p0, struct pnode *p1)$/;"	f	file:
mk_constant	parse.c	/^struct pnode *mk_constant(long value)$/;"	f
mk_list	parse.c	/^struct pnode *mk_list(struct pnode *head, struct pnode *tail)$/;"	f
mk_pnode	parse.c	/^static struct pnode *mk_pnode(enum pnode_tag tag)$/;"	f	file:
mk_symbol	parse.c	/^static struct pnode *mk_symbol(const char *value)$/;"	f	file:
name	gplink.h	/^  char                *name;$/;"	m	struct:archivelist
name	gplink.h	/^  char *name;$/;"	m	struct:list_context
name	gplink.h	/^  char *name;$/;"	m	struct:source_context
named	gplink.h	/^enum outfile { normal, suppress, named };$/;"	e	enum:outfile
next	gplink.h	/^  struct archivelist  *next;$/;"	m	struct:archivelist
normal	gplink.h	/^enum outfile { normal, suppress, named };$/;"	e	enum:outfile
numpaths	gplink.h	/^  int numpaths;                    \/* number of paths in the list *\/$/;"	m	struct:gplink_state
object	gplink.h	/^  gp_object_type        *object;     \/* object files *\/$/;"	m	struct:gplink_state
object_append	gplink.c	/^void object_append(gp_object_type *file, char *name)$/;"	f
objfile	gplink.h	/^    objfile;                       \/* Executable object file control *\/$/;"	m	struct:gplink_state
objfilename	gplink.h	/^    objfilename[BUFSIZ];           \/* Object (.o) file name *\/$/;"	m	struct:gplink_state
op	script.h	/^      int op;$/;"	m	struct:pnode::<anonymous>::<anonymous>
open_src	lst.c	/^open_src(const char *name, gp_symbol_type *symbol)$/;"	f	file:
open_src	scan.c	/^void open_src(const char *name, int isinclude)$/;"	f
optimize	gplink.h	/^  } optimize;$/;"	m	struct:gplink_state
outfile	gplink.h	/^enum outfile { normal, suppress, named };$/;"	g
p	parse.c	/^  struct pnode *p;$/;"	m	union:YYSTYPE	file:
p	parse.h	/^  struct pnode *p;$/;"	m	union:YYSTYPE
p0	script.h	/^      struct pnode *p0, *p1;$/;"	m	struct:pnode::<anonymous>::<anonymous>
p0	script.h	/^      struct pnode *p0;$/;"	m	struct:pnode::<anonymous>::<anonymous>
p1	script.h	/^      struct pnode *p0, *p1;$/;"	m	struct:pnode::<anonymous>::<anonymous>
parse_define	gplink.c	/^void parse_define(const char *optarg,$/;"	f	file:
paths	gplink.h	/^  char *paths[MAX_PATHS];          \/* the list of include paths *\/$/;"	m	struct:gplink_state
pnode	script.h	/^struct pnode {$/;"	s
pnode_tag	script.h	/^  enum pnode_tag { constant, symbol, string, list, binop, unop } tag;$/;"	g	struct:pnode
pop_file	map.c	/^pop_file(struct file_stack *stack)$/;"	f	file:
prev	gplink.h	/^  struct ifdef *prev;$/;"	m	struct:ifdef
prev	gplink.h	/^  struct list_context *prev;$/;"	m	struct:list_context
prev	gplink.h	/^  struct source_context *prev;$/;"	m	struct:source_context
previous	map.c	/^  struct file_stack *previous;$/;"	m	struct:file_stack	file:
process_args	gplink.c	/^process_args( int argc, char *argv[])$/;"	f
processor	gplink.h	/^  pic_processor_t processor;$/;"	m	struct:gplink_state
processor_mismatch_warning	gplink.c	/^static int processor_mismatch_warning = 1;$/;"	v	file:
push_file	map.c	/^push_file(struct file_stack *stack, gp_symbol_type *symbol)$/;"	f	file:
remove_linker_symbol	gplink.c	/^remove_linker_symbol(char *name)$/;"	f	file:
s	parse.c	/^  char *s;$/;"	m	union:YYSTYPE	file:
s	parse.h	/^  char *s;$/;"	m	union:YYSTYPE
scan_archive	gplink.c	/^scan_archive(gp_archive_type *archive, char *name)$/;"	f
scan_index	gplink.c	/^scan_index(struct symbol_table *table, gp_archive_type *archive)$/;"	f
script_error	script.c	/^script_error(const char *messg, const char *detail)$/;"	f
script_symbols	gplink.h	/^  struct symbol_table *script_symbols;$/;"	m	struct:gplink_state
search_idata	gplink.c	/^search_idata(void)$/;"	f	file:
section	gplink.h	/^  } section;$/;"	m	struct:gplink_state
set_optimize_level	gplink.c	/^set_optimize_level(void)$/;"	f	file:
short	parse.c	259;"	d	file:
show_usage	gplink.c	/^void show_usage(void)$/;"	f
source_context	gplink.h	/^struct source_context {$/;"	s
src	gplink.h	/^    struct list_context *src;        \/*   list file context *\/$/;"	m	struct:gplink_state::<anonymous>
src	gplink.h	/^  struct source_context *src;      \/* Top of the stack of the script files *\/$/;"	m	struct:gplink_state
srcfilename	gplink.h	/^  char  *srcfilename,              \/* Script file name *\/$/;"	m	struct:gplink_state
stack_size	gplink.h	/^  unsigned int stack_size;         \/* Value to fill program memory with *\/$/;"	m	struct:gplink_state
startdate	gplink.h	/^  char startdate[80];              \/* When gplink ran *\/$/;"	m	struct:gplink_state
state	gplink.c	/^struct gplink_state state;$/;"	v
string	script.h	/^    const char *string;$/;"	m	union:pnode::<anonymous>
string	script.h	/^  enum pnode_tag { constant, symbol, string, list, binop, unop } tag;$/;"	e	enum:pnode::pnode_tag
suppress	gplink.h	/^enum outfile { normal, suppress, named };$/;"	e	enum:outfile
symbol	gplink.h	/^  gp_symbol_type *symbol;$/;"	m	struct:list_context
symbol	gplink.h	/^  } symbol;$/;"	m	struct:gplink_state
symbol	map.c	/^  gp_symbol_type *symbol;$/;"	m	struct:file_stack	file:
symbol	script.h	/^    const char *symbol;$/;"	m	union:pnode::<anonymous>
symbol	script.h	/^  enum pnode_tag { constant, symbol, string, list, binop, unop } tag;$/;"	e	enum:pnode::pnode_tag
tag	script.h	/^  enum pnode_tag { constant, symbol, string, list, binop, unop } tag;$/;"	m	struct:pnode
tail	script.h	/^      struct pnode *head, *tail;$/;"	m	struct:pnode::<anonymous>::<anonymous>
unop	script.h	/^    } unop;$/;"	m	union:pnode::<anonymous>
unop	script.h	/^  enum pnode_tag { constant, symbol, string, list, binop, unop } tag;$/;"	e	enum:pnode::pnode_tag
unput	scan.c	188;"	d	file:
value	script.h	/^  } value;$/;"	m	struct:pnode
was_org	gplink.h	/^    int was_org;                     \/*   last address that generated code *\/$/;"	m	struct:gplink_state::<anonymous>
weak_symbols	gplink.h	/^    gp_boolean weak_symbols;$/;"	m	struct:gplink_state::<anonymous>
write_cod_block	cod.c	/^write_cod_block(DirBlockInfo *dbp, $/;"	f	file:
write_cod_range_block	cod.c	/^write_cod_range_block(unsigned int address, Block *rb)$/;"	f	file:
write_directory	cod.c	/^write_directory(void)$/;"	f	file:
write_file_block	cod.c	/^write_file_block(void)$/;"	f	file:
write_lst	lst.c	/^write_lst(void)$/;"	f
write_src	lst.c	/^write_src(int last_line)$/;"	f	file:
yy_accept	scan.c	/^static yyconst flex_int16_t yy_accept[62] =$/;"	v	file:
yy_at_bol	scan.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	scan.c	/^static yyconst flex_int16_t yy_base[68] =$/;"	v	file:
yy_bs_column	scan.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	scan.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	scan.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	scan.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	scan.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	scan.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	scan.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	scan.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	scan.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	scan.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	scan.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	scan.c	/^static yyconst flex_int16_t yy_chk[230] =$/;"	v	file:
yy_create_buffer	scan.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	scan.c	/^static yyconst flex_int16_t yy_def[68] =$/;"	v	file:
yy_delete_buffer	scan.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	scan.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	scan.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	scan.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	scan.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	scan.c	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	scan.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	scan.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	scan.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	scan.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	scan.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	scan.c	/^static char yy_hold_char;$/;"	v	file:
yy_init	scan.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	scan.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	scan.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	scan.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	scan.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	scan.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	scan.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	scan.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	scan.c	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	scan.c	/^static yyconst flex_int32_t yy_meta[44] =$/;"	v	file:
yy_n_chars	scan.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	scan.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	scan.c	317;"	d	file:
yy_nxt	scan.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	scan.c	/^static yyconst flex_int16_t yy_nxt[230] =$/;"	v	file:
yy_reduce_print	parse.c	/^yy_reduce_print (yyvsp, yyrule)$/;"	f	file:
yy_scan_buffer	scan.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	scan.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )$/;"	f
yy_scan_string	scan.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	scan.c	329;"	d	file:
yy_set_interactive	scan.c	319;"	d	file:
yy_size_t	scan.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	parse.c	/^yy_stack_print (yybottom, yytop)$/;"	f	file:
yy_start	scan.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	scan.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	scan.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	parse.c	/^yy_symbol_print (yyoutput, yytype, yyvaluep)$/;"	f	file:
yy_symbol_value_print	parse.c	/^yy_symbol_value_print (yyoutput, yytype, yyvaluep)$/;"	f	file:
yy_trans_info	scan.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	scan.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	scan.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	parse.c	/^union yyalloc$/;"	u	file:
yyalloc	scan.c	/^void *yyalloc (yy_size_t  size )$/;"	f
yybuf	gplink.h	/^  struct yy_buffer_state *yybuf;$/;"	m	struct:source_context
yychar	parse.c	/^int yychar;$/;"	v
yycheck	parse.c	/^static const yytype_int8 yycheck[] =$/;"	v	file:
yyclearin	parse.c	665;"	d	file:
yyconst	scan.c	106;"	d	file:
yyconst	scan.c	108;"	d	file:
yydebug	parse.c	/^int yydebug;$/;"	v
yydefact	parse.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	parse.c	/^static const yytype_int8 yydefgoto[] =$/;"	v	file:
yydestruct	parse.c	/^yydestruct (yymsg, yytype, yyvaluep)$/;"	f	file:
yyensure_buffer_stack	scan.c	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	parse.c	664;"	d	file:
yyerror	parse.c	/^void yyerror(char *message)$/;"	f
yyfree	scan.c	/^void yyfree (void * ptr )$/;"	f
yyget_debug	scan.c	/^int yyget_debug  (void)$/;"	f
yyget_in	scan.c	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	scan.c	/^int yyget_leng  (void)$/;"	f
yyget_lineno	scan.c	/^int yyget_lineno  (void)$/;"	f
yyget_out	scan.c	/^FILE *yyget_out  (void)$/;"	f
yyget_text	scan.c	/^char *yyget_text  (void)$/;"	f
yyin	scan.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	scan.c	/^    static int yyinput (void)$/;"	f	file:
yyleng	scan.c	/^int yyleng;$/;"	v
yyless	scan.c	175;"	d	file:
yyless	scan.c	1777;"	d	file:
yyless	scan.c	1778;"	d	file:
yylex_destroy	scan.c	/^int yylex_destroy  (void)$/;"	f
yylineno	scan.c	/^int yylineno = 1;$/;"	v
yylval	parse.c	/^YYSTYPE yylval;$/;"	v
yymore	scan.c	525;"	d	file:
yynerrs	parse.c	/^int yynerrs;$/;"	v
yyout	scan.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	parse.c	/^static const yytype_int8 yypact[] =$/;"	v	file:
yypgoto	parse.c	/^static const yytype_int8 yypgoto[] =$/;"	v	file:
yypop_buffer_state	scan.c	/^void yypop_buffer_state (void)$/;"	f
yyprhs	parse.c	/^static const yytype_uint8 yyprhs[] =$/;"	v	file:
yypush_buffer_state	scan.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	parse.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	parse.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	scan.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	scan.c	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrhs	parse.c	/^static const yytype_int8 yyrhs[] =$/;"	v	file:
yyrline	parse.c	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyset_debug	scan.c	/^void yyset_debug (int  bdebug )$/;"	f
yyset_in	scan.c	/^void yyset_in (FILE *  in_str )$/;"	f
yyset_lineno	scan.c	/^void yyset_lineno (int  line_number )$/;"	f
yyset_out	scan.c	/^void yyset_out (FILE *  out_str )$/;"	f
yyss_alloc	parse.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	parse.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	parse.c	/^yystpcpy (yydest, yysrc)$/;"	f	file:
yystpcpy	parse.c	963;"	d	file:
yystrlen	parse.c	/^yystrlen (yystr)$/;"	f	file:
yystrlen	parse.c	940;"	d	file:
yystype	parse.c	247;"	d	file:
yystype	parse.h	89;"	d
yysyntax_error	parse.c	/^yysyntax_error (char *yyresult, int yystate, int yychar)$/;"	f	file:
yytable	parse.c	/^static const yytype_int8 yytable[] =$/;"	v	file:
yyterminate	scan.c	704;"	d	file:
yytext	scan.c	/^char *yytext;$/;"	v
yytext_ptr	scan.c	357;"	d	file:
yytname	parse.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	parse.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	parse.c	/^   enum yytokentype {$/;"	g	file:
yytokentype	parse.h	/^   enum yytokentype {$/;"	g
yytoknum	parse.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	parse.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	parse.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	parse.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	parse.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	parse.c	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	parse.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	parse.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	parse.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	parse.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	parse.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyunput	scan.c	/^    static void yyunput (int c, register char * yy_bp )$/;"	f	file:
yyvs_alloc	parse.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywrap	scan.c	343;"	d	file:
